{"version":3,"sources":["components/Context/LibraryContext.js","components/LibraryComponents/Library/Library.jsx","components/CreateComponents/CreateContext/CreateContext.js","img/Spotify_Icon_RGB_Black.png","components/LibraryComponents/ArtistItem/ArtistItem.jsx","components/LibraryComponents/LibraryList/LibraryList.jsx","components/LibraryComponents/TrackList/TrackList.jsx","components/BasicComponents/GetLogin/GetLogin.jsx","components/BasicComponents/HomePage/HomePage.jsx","img/Spotify_Logo_RGB_Black.png","components/BasicComponents/Navbar/Navbar.jsx","components/BasicComponents/UserInfo/UserInfo.jsx","components/CreateComponents/Create/Create.jsx","components/CreateComponents/CreateSelections/CreateSelections.jsx","components/CreateComponents/GenreList/GenreList.jsx","components/CreateComponents/PlaylistMaker/PlaylistMaker.jsx","components/CreateComponents/ArtistList/ArtistList.jsx","components/CreateComponents/Checkbox/Checkbox.jsx","components/CreateComponents/CreateButtons/CreateButtons.jsx","App.js","index.js"],"names":["axios","defaults","withCredentials","LibraryContext","React","createContext","Provider","LibraryProvider","Consumer","state","artistLibrary","user","displayOptions","display","loggedIn","props","api","startup","a","console","log","document","cookie","getMusic","music","getUser","setContextState","data","sort","b","name","options","method","url","stateItem","itemValue","setState","createPlaylist","array","playlistName","trackList","id","this","value","children","Component","Library","useContext","length","CreateContext","CreateProvider","setCreateOption","selection","createOption","setList","newList","list","setSelectedList","selectedList","setArtistList","artistList","setTrackList","changeOption","option","checkList","tempList","includes","index","indexOf","splice","push","changeArtistOption","clearSelection","resetState","goBack","associateArtists","genreCompiler","compileGenres","newArtistList","findArtistsByGenre","forEach","artist","genres","genre","genreList","Set","pullTracksFromArtists","album","tracks","track","pullURIFromTracks","URIList","uri","changePlaylistLink","link","playlistLink","ArtistItem","images","useState","numOfTracks","setNumOfTracks","displayArtistDetails","setDisplayArtistDetails","useEffect","formatArtist","num","icon","className","onClick","src","showArtistDetails","LibraryList","map","TrackList","i","artists","remove","albumName","eachTrack","GetLogin","newWindow","changeLogin","spotifyURL","setUrl","undefined","window","open","timer","setInterval","closed","clearInterval","openSpotify","HomePage","Navbar","logo","alt","item","UserInfo","display_name","country","email","product","showInfo","Create","CreateSelections","beginCreating","every","GenreList","PlaylistMaker","playlistNameRef","useRef","setDisplay","beginPlaylist","current","alert","trackURIs","playlistURL","removeItem","key","e","type","ref","ArtistList","Checkbox","checked","onChange","CreateButtons","startCreating","toggleArtists","App","getURL","loginResponse","body","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6204edf7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\naxios.defaults.withCredentials = true;\r\n\r\nconst LibraryContext = React.createContext();\r\nconst { Provider, Consumer } = LibraryContext;\r\n\r\nclass LibraryProvider extends Component {\r\n    state = {\r\n        artistLibrary: [],\r\n        user: {},\r\n        displayOptions: [\r\n            'My Library',\r\n            'Create',\r\n            'User Info',\r\n        ],\r\n        display: 'Base',\r\n        loggedIn: this.props.loggedIn,\r\n        api: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('this is the development build ')\r\n            this.setState({\r\n                api: 'http://localhost:8888/',\r\n            })\r\n        } else if (process.env.NODE_ENV === 'production') {\r\n            console.log('this is the production build ')\r\n            this.setState({\r\n                api: 'mendoza-playlist.herokuapp.com/',\r\n            })\r\n        } else {\r\n            console.log('there was some sort of error determining if this is prod or dev build')\r\n        }\r\n    }\r\n\r\n    startup = async () => {\r\n        console.log('api: ', this.state.api)\r\n        console.log('cookies: ', document.cookie)\r\n        let music = await this.getMusic();\r\n        let user = await this.getUser();\r\n        this.setContextState('artistLibrary', music.data.sort((a, b) => (a.name > b.name) ? 1 : -1));\r\n        this.setContextState('user', user.data)\r\n        console.log('user: ', this.state.user)\r\n    }\r\n\r\n    //axios request to get music\r\n    getMusic = () => {\r\n        console.log('getting your music now');\r\n        let options = {\r\n            method: 'get',\r\n            url: this.state.api + 'library',\r\n            withCredentials: true,\r\n        };\r\n        console.log('music url: ', options.url)\r\n        return axios(options);\r\n    }\r\n\r\n    //axios request to get user\r\n    getUser = () => {\r\n        console.log('getting user info now')\r\n        let options = {\r\n            method: 'get',\r\n            url: this.state.api + 'userinfo',\r\n            withCredentials: true,\r\n        };\r\n        return axios(options);\r\n    }\r\n\r\n    //just an easy function that allows me to set different context state values\r\n    setContextState = (stateItem, itemValue) => {\r\n        this.setState({\r\n            [stateItem]: itemValue,\r\n        });\r\n    }\r\n\r\n    //takes the array of artists and holds it for now\r\n    //takes the playlist name and runs it through the api\r\n    //to create a playlist with that name\r\n    createPlaylist = async (array, playlistName) => {\r\n        console.log('i am about to create a playlist using this name: ', playlistName)\r\n        console.log('just checking the array: ', array);\r\n        let options = {\r\n            method: 'post',\r\n            url: this.state.api + 'newplaylist',\r\n            data: {\r\n                trackList: array,\r\n                playlistName: playlistName,\r\n                user: this.state.user.id,\r\n                withCredentials: true,\r\n            }\r\n        }\r\n        console.log(document.cookie)\r\n        let url = await axios(options);\r\n        return url;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Provider \r\n                value ={{\r\n                    ...this.state,\r\n                    startup: this.startup,\r\n                    setContextState: this.setContextState,\r\n                    createPlaylist: this.createPlaylist,\r\n                }}\r\n            >{this.props.children}</Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport { LibraryContext, LibraryProvider, Consumer as LibraryConsumer };","import React, {  useContext } from 'react';\r\nimport '../../../App.css';\r\nimport { LibraryContext } from '../../Context/LibraryContext';\r\nimport { LibraryList } from '../..';\r\n\r\nconst Library = () => {\r\n\r\n    const { artistLibrary } = useContext(LibraryContext);\r\n    // const [display, setDisplay] = useState('list');\r\n\r\n\r\n    //Checks if there are items in library in state, if there is shows number of tracks in library\r\n    //and shows a button to view artists. If no artists in library in state, shows a <p>\r\n    //that says 'please hold while I get your tracks'\r\n    const waitingOnAPI = () => {\r\n        if (artistLibrary.length > 0) {\r\n            return <LibraryList />\r\n        } else {\r\n            return (<p>Please hold while I get your tracks!</p>);\r\n        }\r\n    };\r\n\r\n    return waitingOnAPI();\r\n}\r\n\r\nexport default Library;","import React, { Component } from 'react';\r\n// import { LibraryContext } from '../../Context/LibraryContext'\r\n\r\nconst CreateContext = React.createContext();\r\nconst { Provider, Consumer } = CreateContext;\r\n\r\nclass CreateProvider extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            createOption: '',\r\n            list: [],\r\n            selectedList: [],\r\n            artistList: [],\r\n            trackList: [],\r\n            playlistLink: '',\r\n        }\r\n    }\r\n\r\n    //just state setter functions to make setting state quick\r\n    setCreateOption = (selection) => {\r\n        console.log('creating by: ', selection);\r\n        this.setState({\r\n            createOption: selection,\r\n        });\r\n    };\r\n\r\n    setList = (newList) => {\r\n        this.setState({\r\n            list: newList,\r\n        });\r\n    };\r\n\r\n    setSelectedList = (newList) => {\r\n        this.setState({\r\n            selectedList: newList,\r\n        });\r\n    };\r\n\r\n    setArtistList = (newList) => {\r\n        this.setState({\r\n            artistList: newList,\r\n        });\r\n    };\r\n\r\n    setTrackList = (newList) => {\r\n        this.setState({\r\n            trackList: newList,\r\n        });\r\n    };\r\n\r\n    //toggles the items on or off the given list\r\n    changeOption = (option, checkList) => {\r\n        let tempList = checkList;\r\n        if (tempList.includes(option)) {\r\n            const index = tempList.indexOf(option);\r\n            if (index > -1) {\r\n                console.log('removing option: ', option)\r\n                tempList.splice(index, 1);\r\n            }\r\n        } else {\r\n            console.log('adding option: ', option)\r\n            tempList.push(option);\r\n        }\r\n        return tempList;\r\n    }\r\n\r\n    //supposed to toggle items off of the artistList in state\r\n    //but it's not working and idk why\r\n    changeArtistOption = (option) => {\r\n        let tempList = this.state.artistList;\r\n        if (tempList.includes(option)) {\r\n            const index = tempList.indexOf(option);\r\n            if (index > -1) {\r\n                console.log('removing this from your artistList: ', option);\r\n                tempList.splice(index, 1);\r\n            }\r\n        }\r\n        this.setArtistList(tempList);\r\n    }\r\n\r\n    //clears the selected and artist lists to restart the process\r\n    clearSelection = () => {\r\n        if (this.state.createOption === 'create') {\r\n            this.setCreateOption('');\r\n        };\r\n        this.setSelectedList([]);\r\n        this.setArtistList([]);\r\n    }\r\n\r\n    //completely resets state\r\n    resetState = () => {\r\n        this.setState({\r\n            createOption: '',\r\n            list: [],\r\n            selectedList: [],\r\n            artistList: [],\r\n        })\r\n    }\r\n\r\n    //this function figures out what the createOption was set to before it\r\n    //was set to 'create'. Then restores the progress back to that point\r\n    goBack = () => {\r\n        if (this.state.selectedList.length > 0) {\r\n            if (typeof this.state.selectedList[0] === 'string') {\r\n                this.setCreateOption('genre');\r\n                this.setArtistList([]);\r\n            } else {\r\n                this.setCreateOption('artist');\r\n                this.setArtistList([]);\r\n            }\r\n        } else {\r\n            this.resetState();\r\n        }\r\n    }\r\n\r\n    //pulls genreList out of the list of provided artists and then finds all the artists\r\n    //in library that match the genres on the list\r\n    associateArtists = (artistList, artistLibrary) => {\r\n        console.log('associating artists')\r\n        let genreCompiler = this.compileGenres(artistList);\r\n        let newArtistList = this.findArtistsByGenre(genreCompiler, artistLibrary);\r\n        artistList.forEach(artist => {\r\n            if (newArtistList.includes(artist)) {\r\n                return;\r\n            } else {\r\n                newArtistList.push(artist);\r\n            }\r\n        })\r\n        let sortedList = newArtistList.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n        return sortedList;\r\n    }\r\n\r\n    //accepts a list of artists and returns the genres\r\n    //associated with those artists\r\n    compileGenres = (artistList) => {\r\n        let genreCompiler = [];\r\n        artistList.forEach(artist => {\r\n            artist.genres.forEach(genre => {\r\n                if (!genreCompiler.includes(genre)) {\r\n                    genreCompiler.push(genre);\r\n                }\r\n            })\r\n        })\r\n        genreCompiler.sort();\r\n        return genreCompiler;\r\n    }\r\n\r\n    //should take a list of genres and a playlist name and return a list of matching artists\r\n    findArtistsByGenre = (genreList, artistLibrary) => {\r\n        let artistList = [];\r\n        genreList.forEach(genre => {\r\n            artistLibrary.forEach(artist => {\r\n                if (artist.genres.includes(genre)) {\r\n                    artistList.push(artist);\r\n                }\r\n            })\r\n        })\r\n        let uniqueArtists = [...new Set(artistList)];\r\n        return uniqueArtists;\r\n    }\r\n\r\n    //accepts an array of artists and puts all of that \r\n    //artists saved tracks into an array\r\n    pullTracksFromArtists = (array) => {\r\n        let tempList = [];\r\n        array.forEach(artist => {\r\n            artist.music.forEach(album => {\r\n                album.tracks.forEach(track => {\r\n                    tempList.push(track);\r\n                })\r\n            })\r\n        })\r\n        let trackList = [...new Set(tempList)];\r\n        return trackList;\r\n    }\r\n\r\n    //accepts an array of track objects and creates an \r\n    //array of URIs from the tracks\r\n    pullURIFromTracks = (array) => {\r\n        let URIList = [];\r\n        array.forEach(track => {\r\n            URIList.push(track.uri);\r\n        })\r\n        return URIList;\r\n    }\r\n\r\n    changePlaylistLink = (link) => {\r\n        this.setState({\r\n            playlistLink: link,\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Provider\r\n                value = {{\r\n                    ...this.state,\r\n                    setCreateOption: this.setCreateOption,\r\n                    setList: this.setList,\r\n                    setSelectedList: this.setSelectedList,\r\n                    setArtistList: this.setArtistList,\r\n                    setTrackList: this.setTrackList,\r\n                    changeOption: this.changeOption,\r\n                    clearSelection: this.clearSelection,\r\n                    associateArtists: this.associateArtists,\r\n                    compileGenres: this.compileGenres,\r\n                    findArtistsByGenre: this.findArtistsByGenre,\r\n                    pullTracksFromArtists: this.pullTracksFromArtists,\r\n                    changeArtistOption: this.changeArtistOption,\r\n                    pullURIFromTracks: this.pullURIFromTracks,\r\n                    goBack: this.goBack,\r\n                    changePlaylistLink: this.changePlaylistLink,\r\n                }}\r\n            >{this.props.children}</Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport { CreateContext, CreateProvider, Consumer as CreateConsumer };","export default __webpack_public_path__ + \"static/media/Spotify_Icon_RGB_Black.0e932c0a.png\";","import React, { useState, useEffect, useContext, } from 'react';\r\n// import { LibraryContext } from '../../Context/LibraryContext';\r\nimport { CreateContext } from '../../CreateComponents/CreateContext/CreateContext';\r\nimport { TrackList } from '../..';\r\nimport '../../../App.css';\r\nimport icon from '../../../img/Spotify_Icon_RGB_Black.png';\r\n\r\nconst ArtistItem = ({artist}) => {\r\n    // console.log('the artist: ', artist)\r\n    let { name, music, images } = artist;\r\n\r\n    let { pullTracksFromArtists, } = useContext(CreateContext);\r\n\r\n    //just a number tied to the number of tracks a given artist has\r\n    let [numOfTracks, setNumOfTracks] = useState(0);\r\n    //just a bool to determine whether or not to display the full\r\n    //track list the given artist has\r\n    let [displayArtistDetails, setDisplayArtistDetails] = useState(false);\r\n\r\n    //all this does is function like componentDidMount and gets the\r\n    //function formatArtist() to fire when mounted\r\n    useEffect(() => {\r\n        formatArtist();\r\n    }, [artist]);\r\n\r\n    //adds up the number of total tracks an artist has in the library\r\n    //and also determines if there are images on the artist object\r\n    //and if not it sets the image to the Spotify logo\r\n    const formatArtist = () => {\r\n        let num = 0;\r\n        music.forEach(album => {\r\n            num = num + album.tracks.length;\r\n        })\r\n        setNumOfTracks(num)\r\n        if (images.length === 0) {\r\n            images.push({url: icon});\r\n        }\r\n    }\r\n\r\n    //the function that holds the rest of the artist details and uses\r\n    //the displayArtistDetails state value to determine whether or\r\n    //not to show itself\r\n    const showArtistDetails = () => {\r\n        let trackList = pullTracksFromArtists([artist]);\r\n        if (displayArtistDetails) {\r\n            console.log('artists track list: ', trackList)\r\n            return (\r\n                <tr className='singleArtist' onClick={() => {setDisplayArtistDetails(!displayArtistDetails)}}>\r\n                <td><img className='artistImage' src={images[0] ? images[0].url : icon} /></td>\r\n                    <TrackList list={trackList} />\r\n                </tr>\r\n            )\r\n        } else {\r\n            return (\r\n                <tr className='singleArtist' onClick={() => {setDisplayArtistDetails(!displayArtistDetails)}}>\r\n                    <td><img className='artistImage' src={images[0] ? images[0].url : icon} /></td>\r\n                    <td><b>{name}</b></td>\r\n                    <td>{music.length}</td>\r\n                    <td>{numOfTracks}</td>\r\n                </tr>\r\n            );\r\n        }\r\n    }\r\n\r\n    return showArtistDetails();\r\n    \r\n}\r\n\r\nexport default ArtistItem;","import React, { useContext } from 'react';\r\nimport '../../../App.css';\r\nimport { LibraryContext } from '../../Context/LibraryContext';\r\nimport { ArtistItem } from '../..';\r\n\r\nconst LibraryList = () => {\r\n    const { artistLibrary } = useContext(LibraryContext);\r\n\r\n    return (\r\n        <div className='libraryPage'>\r\n            <h1>Here is your library:</h1>\r\n            <p>You have {artistLibrary.length} artists in your library</p>\r\n            <table className='artistList'>\r\n                <thead>\r\n                    <tr className='artistListHead'>\r\n                        <th></th>\r\n                        <th>Artist</th>\r\n                        <th>Saved Albums</th>\r\n                        <th>Saved Tracks</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className='artistListBody'>\r\n                    {artistLibrary.map(artist => (\r\n                            <ArtistItem artist={artist} key={artist.name}/>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LibraryList;","import React from 'react';\r\n\r\nconst TrackList = (props) => {\r\n\r\n    // console.log('this should be the trackList: ', props.list);\r\n\r\n    const eachTrack = (track) => {\r\n        let artistList = '';\r\n        for (let i = 0; i < track.artists.length - 1; i++) {\r\n            artistList += track.artists[i];\r\n            artistList += ', ';\r\n        }\r\n        artistList += track.artists[track.artists.length - 1]\r\n        return (\r\n            <tr className='track' key={track.name} onClick={() => props.remove ? props.remove(track) : console.log(track)}>\r\n                <td>{track.name}</td>\r\n                <td>{track.albumName}</td>\r\n                <td>{artistList}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <table className='trackList'>\r\n            <thead>\r\n                <tr>\r\n                    <th>Track Name</th>\r\n                    <th>Album</th>\r\n                    <th>Artist</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.list.map(track => (\r\n                    eachTrack(track)\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n};\r\n\r\nexport default TrackList;\r\n","import React, { useState, useEffect, useContext} from 'react';\r\nimport { LibraryContext } from '../../Context/LibraryContext';\r\n\r\nconst GetLogin = ({changeLogin, spotifyURL}) => {\r\n\r\n    const [url, setUrl] = useState({});\r\n    let { startup } = useContext(LibraryContext);\r\n\r\n    useEffect(() => {\r\n        setUrl(spotifyURL)\r\n    }, [spotifyURL]);\r\n\r\n    let newWindow;\r\n\r\n    const openSpotify = () => {\r\n        var width = 450,\r\n            height = 730;\r\n        let features = 'menubar=no,location=no,resizable=no,scrollbars=no,status=no, width=' + width + ', height=' + height\r\n        newWindow = window.open(spotifyURL, 'Spotify', features);\r\n        console.log('this is the url I am opening: ', spotifyURL)\r\n\r\n\r\n        let timer = setInterval(function() {\r\n            if (newWindow.closed) {\r\n                clearInterval(timer);\r\n                changeLogin();\r\n                console.log('window closed')\r\n                startup();\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    const waitForURL = () => {\r\n        if (url === undefined) {\r\n            return (<p>We are generating your sign in link now</p>)\r\n        } else {\r\n            return (\r\n                <button className='signInButton' onClick={() => openSpotify()}>\r\n                    Log In\r\n                </button>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        waitForURL()\r\n    )\r\n}\r\n\r\nexport default GetLogin;","import React, { useContext } from 'react';\r\nimport { LibraryContext } from '../../Context/LibraryContext';\r\nimport { UserInfo, Library, Create } from '../../';\r\nimport { CreateProvider } from '../../CreateComponents/CreateContext/CreateContext';\r\n\r\nconst HomePage = () => {\r\n\r\n    let { artistLibrary, display } = useContext(LibraryContext);\r\n\r\n    //determines which component to display based on the value stored in state\r\n    const showComponent = () => {\r\n        if (display === 'My Library') {\r\n            return <Library />\r\n        } else if (display === 'Create') {\r\n            return <Create />\r\n        } else if (display === 'User Info') {\r\n            return <UserInfo />\r\n        } else if (display === 'Base') {\r\n            return (\r\n                <div className='instructions'>\r\n                    <h1>Ok, let's get to work!</h1>\r\n                    <p>Make a selection above to get started</p>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const waitForLibrary = () => {\r\n        if (artistLibrary.length > 0) {\r\n            return (\r\n                <div className='homeDiv'>\r\n                    <CreateProvider>{showComponent()}</CreateProvider>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className='homeDiv'>\r\n                    <h3>Please hold while I retrieve your music library!</h3>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return waitForLibrary()\r\n};\r\n\r\n\r\nexport default HomePage;","export default __webpack_public_path__ + \"static/media/Spotify_Logo_RGB_Black.0d1e5545.png\";","import React, { useContext } from 'react';\r\nimport { LibraryContext } from '../../Context/LibraryContext';\r\nimport { GetLogin } from '../../';\r\nimport logo from '../../../img/Spotify_Logo_RGB_Black.png';\r\n\r\nconst Navbar = ({ loggedIn, changeLogin, spotifyURL }) => {\r\n\r\n    const { displayOptions, setContextState } = useContext(LibraryContext)\r\n\r\n    const changeOption = (value) => {\r\n        setContextState('display', value);\r\n    }\r\n\r\n    const show = () => {\r\n        if (loggedIn) {\r\n            return (\r\n                <div className='navbar'>\r\n                    <div className='logoDiv'>\r\n                        <img src={logo} alt='logo' className='logo'></img>\r\n                    </div>\r\n                    <ul className='menu'>\r\n                        {displayOptions.map((item, i) => (\r\n                            <li id='menuItem' key={i} onClick={() => {changeOption(item)}}>{item}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className='navbar'>\r\n                    <div className='logoDiv'>\r\n                        <img src={logo} alt='logo' className='logo'></img>\r\n                    </div>\r\n                    <GetLogin changeLogin={changeLogin} spotifyURL={spotifyURL}/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\nreturn show();\r\n}\r\n\r\nexport default Navbar;","import React, { useContext } from 'react';\r\nimport { LibraryContext } from '../../Context/LibraryContext';\r\n\r\nconst UserInfo = () => {\r\n\r\n    const { user } = useContext(LibraryContext);\r\n\r\n    const showInfo = (user) => {\r\n        return (\r\n            <ul className='infoList'>\r\n            <li><b>Username:</b> {user.display_name}</li>\r\n                <li><b>Country:</b> {user.country}</li>\r\n                <li><b>Email:</b> {user.email}</li>\r\n                <li><b>Subscription Type:</b> {user.product}</li>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='userInfo'>\r\n            <h1>{user.display_name}:</h1>\r\n            {showInfo(user)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserInfo;","import React, { useContext } from 'react';\r\nimport { CreateContext } from '../CreateContext/CreateContext';\r\nimport { CreateSelections, GenreList, PlaylistMaker, ArtistList} from '../..';\r\n\r\n\r\nconst Create = () => {\r\n\r\n    let { createOption, playlistLink } = useContext(CreateContext);\r\n\r\n    const openPlaylist = () => {\r\n        window.open(playlistLink, 'Spotify');\r\n    }\r\n\r\n    const instructions = () => {\r\n        return <h2 className='instructions'>On this page, you can select as many {createOption}s as you like, and the app will automatically add them to your list of selected {createOption}s. \r\n            When you are done selecting, click the \"Show Playlist\" button below to see all the songs that will be added to your playlist.</h2>\r\n    }\r\n\r\n    //determines which createOption is selected and renders\r\n    //appropriate component based on selection\r\n    const displayCreateMenu = () => {\r\n        if (createOption === 'genre') {\r\n            return (\r\n                <div className='create'>\r\n                    <GenreList />\r\n                    <PlaylistMaker />\r\n                </div>\r\n            );\r\n        } else if (createOption === 'artist') {\r\n            return (\r\n                <div className='create'>\r\n                    <ArtistList />\r\n                    <PlaylistMaker />\r\n                </div>\r\n            );\r\n        } else if (createOption === 'create') {\r\n            return (\r\n                <div className='create'>\r\n                    <PlaylistMaker />\r\n                </div>\r\n            )\r\n        } else if (createOption === 'success') {\r\n            return (\r\n                <div className = 'create'>\r\n                    <p className='success'>Congrats! You just created your playlist. Click the button to view it in your browser.</p>\r\n                    <button onClick={() => {openPlaylist()}}>View playlist</button>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className='createPage'>\r\n                    <p>Use this page to create playlists based on all the genres present in your library or by one or multiple artists present in your library.</p>\r\n                    <p>Make a selection to continue.</p>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='createPage'>\r\n            <div className='createHead'>\r\n                <h1>Create a playlist</h1>\r\n                {instructions()}\r\n                <CreateSelections />\r\n            </div>\r\n            {displayCreateMenu()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Create;","import React, { useContext } from 'react';\r\nimport { LibraryContext } from '../../Context/LibraryContext';\r\nimport { CreateContext } from '../CreateContext/CreateContext';\r\n\r\nconst CreateSelections = () => {\r\n\r\n    let { artistLibrary } = useContext(LibraryContext);\r\n    let { \r\n        createOption,\r\n        selectedList,\r\n        artistList,\r\n        setCreateOption,\r\n        setList,\r\n        setSelectedList,\r\n        compileGenres,\r\n        findArtistsByGenre\r\n    } = useContext(CreateContext);\r\n\r\n\r\n    const beginCreating = (selection, newList) => {\r\n        //create => something else\r\n        if (createOption === 'create' && selection !== 'create') {\r\n            //create => genre\r\n            if (selection === 'genre') {\r\n                console.log('create option switched from create to genre')\r\n                //genre => create => genre\r\n                if (selectedList.every(i => (typeof i === 'string'))) {\r\n                    console.log('create option used to be genre')\r\n                    setCreateOption(selection);\r\n                //artist => create => genre\r\n                } else {\r\n                    console.log('create option used to be artist')\r\n                    let tempList = selectedList;\r\n                    setSelectedList(compileGenres(tempList));\r\n                    setCreateOption(selection);\r\n                    setList(newList);\r\n                }\r\n            //create => artist\r\n            } else if (selection === 'artist') {\r\n                console.log('create option switched from create to artist')\r\n                //artist => create => artist\r\n                if (selectedList.every(i => (typeof i === 'object'))) {\r\n                    console.log('create option used to be artist')\r\n                    setCreateOption(selection);\r\n                //genre => create => artist\r\n                } else {\r\n                    console.log('create option used to be genre')\r\n                    setSelectedList(artistList);\r\n                    setCreateOption(selection);\r\n                    setList(artistLibrary);\r\n                }\r\n            }\r\n        //artist => genre\r\n        } else if (createOption === 'artist' && selection === 'genre') {\r\n            let tempList = selectedList;\r\n            setSelectedList(compileGenres(tempList));\r\n            setCreateOption(selection);\r\n            setList(newList);\r\n        //genre => artist\r\n        } else if (createOption === 'genre' && selection === 'artist') {\r\n            let tempList = selectedList;\r\n            setSelectedList(findArtistsByGenre(tempList, artistLibrary))\r\n            setCreateOption(selection);\r\n            setList(newList);\r\n        } else if (createOption === selection) {\r\n            return;\r\n        //any other cases just resets\r\n        } else {\r\n            setList(newList);\r\n            setCreateOption(selection);\r\n            setSelectedList([]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"createSelections\">\r\n            <button onClick={() => beginCreating('genre', compileGenres(artistLibrary))}>Create by genre</button>\r\n            <button onClick={() => beginCreating('artist', artistLibrary)}>Create by artist</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateSelections;","import React,  { useContext, } from 'react';\r\nimport { CreateContext } from '../CreateContext/CreateContext';\r\nimport { Checkbox } from '../..';\r\n\r\n\r\nconst GenreList = () => {\r\n\r\n    let { list } = useContext(CreateContext);\r\n\r\n    return (\r\n        <ul className='list'>\r\n            {list.map((genre, i) => (\r\n                <Checkbox item={genre} key={i} />\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default GenreList;","import React, { useContext, useState, useRef } from 'react';\r\nimport { CreateContext } from '../CreateContext/CreateContext';\r\nimport { LibraryContext } from '../../Context/LibraryContext';\r\nimport { CreateButtons, TrackList } from '../..';\r\n\r\n\r\nconst PlaylistMaker = () => {\r\n\r\n    const {\r\n        createOption,\r\n        setCreateOption,\r\n        changePlaylistLink,\r\n        selectedList,\r\n        artistList,\r\n        trackList,\r\n        setSelectedList,\r\n        setTrackList,\r\n        changeOption,\r\n        pullURIFromTracks,\r\n    } = useContext(CreateContext);\r\n\r\n    const { createPlaylist } = useContext(LibraryContext);\r\n\r\n    // useEffect(() => {\r\n    //     setWorkingList(artistList);\r\n    // }, [artistList]);\r\n\r\n    const playlistNameRef = useRef(null);\r\n\r\n    //literally just to toggle the display mode when createOption is set to 'genre'\r\n    const [display, setDisplay] = useState('default-genre');\r\n    // const [workingList, setWorkingList] = useState(artistList)\r\n\r\n    //works with the display state value above to toggle\r\n    //back and forth the display mode when creating by genre\r\n    const showList = () => {\r\n        if (display === 'default-genre') {\r\n            return (\r\n                <ul className='playlistMakerList'>\r\n                    {selectedList.sort().map((genre, key) => (\r\n                        <li key={key} onClick={e => {setSelectedList(changeOption(genre, selectedList))}}>{genre}</li>\r\n                    ))}\r\n                </ul>\r\n            );\r\n        } else if (display === 'default-artist') {\r\n            return (\r\n                <ul className='playlistMakerList'>\r\n                    {artistList.sort((a, b) => (a.name > b.name) ? 1 : -1).map((artist, key) => (\r\n                        <li key={key}>{artist.name}</li>\r\n                    ))}\r\n                </ul>\r\n            )\r\n        }\r\n    }\r\n\r\n    //starts the process of making a playlist.\r\n    const beginPlaylist = async () => {\r\n        let name = playlistNameRef.current.value;\r\n        if (!name) {\r\n            console.log('you need a name!')\r\n            alert('You need to name your playlist first!')\r\n            playlistNameRef.current.value = 'GIVE ME A NAME FIRST'\r\n        } else {\r\n            let trackURIs = pullURIFromTracks(trackList);\r\n            let playlistURL =  await createPlaylist(trackURIs, name);\r\n            console.log('playlistURL: ', playlistURL)\r\n            changePlaylistLink(playlistURL.data);\r\n            setCreateOption('success');\r\n        }\r\n    }\r\n\r\n    const removeItem = (item) => {\r\n        setTrackList(changeOption(item, trackList))\r\n    }\r\n\r\n    //This is what is returned if 'createSelection' is set to 'genre'\r\n    const createByGenre = () => {\r\n        return (\r\n            <div className='playlistMaker'>\r\n                <p>Here are your selected genres so far:</p>\r\n                {showList()}\r\n                <CreateButtons display={display} setDisplay={setDisplay}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //This is what is returned if 'createSelection' is set to 'artist'\r\n    const createByArtist = () => {\r\n        return (\r\n            <div className='playlistMaker'>\r\n                <p>Here are your selected artists so far:</p>\r\n                <ul className='playlistMakerList'>\r\n                    {selectedList.sort((a, b) => (a.name > b.name) ? 1 : -1).map((artist, key) => (\r\n                        <li key={key} onClick={e => {setSelectedList(changeOption(artist, selectedList))}}>{artist.name}</li>\r\n                    ))}\r\n                </ul>\r\n                <CreateButtons />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //This is what is returned if 'createSelection' is set to 'create'\r\n    const create = () => {\r\n        return (\r\n            <div className='playlistMaker'>\r\n                <p>Here is the current version of your playlist:</p>\r\n                <TrackList list={trackList} remove={removeItem}/>\r\n                <form className='name-playlist'>\r\n                    <label>Name your playlist:</label>\r\n                    <input type='text' name='Name your playlist' ref={playlistNameRef}></input>\r\n                </form>\r\n                <b>Clicking 'Create' below will create a playlist with these artists</b><br></br>\r\n                <CreateButtons beginPlaylist={beginPlaylist}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //conditional rendering based on if user chose to create by genre\r\n    //or create by artist, or begin the create stage\r\n    const genreOrArtist = () => {\r\n        if (createOption === 'artist') {\r\n            return createByArtist();\r\n        } else if (createOption === 'genre') {\r\n            return createByGenre();\r\n        } else if (createOption === 'create') {\r\n            return create();\r\n        }\r\n    }\r\n\r\n    return genreOrArtist();\r\n}\r\n\r\nexport default PlaylistMaker;","import React, { useContext } from 'react';\r\n// import { LibraryContext } from '../../Context/LibraryContext';\r\nimport { CreateContext } from '../CreateContext/CreateContext';\r\nimport { Checkbox } from '../..';\r\n\r\nconst ArtistList = () => {\r\n    \r\n    let { list } = useContext(CreateContext);\r\n\r\n    return (\r\n        <ul className='list'>\r\n            {list.map((artist, i) => (\r\n                <Checkbox item={artist} key={i} />\r\n            ))}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default ArtistList;","import React, { useContext } from 'react';\r\nimport { CreateContext } from '../CreateContext/CreateContext';\r\n\r\nconst Checkbox = (props) => {\r\n\r\n    let { item } = props;\r\n\r\n    let { \r\n        selectedList,\r\n        setSelectedList,\r\n        changeOption,\r\n    } = useContext(CreateContext);\r\n    \r\n    let checked = false;\r\n    let name = typeof item === 'object' ? item.name : item;\r\n\r\n    if (selectedList.includes(item)) {\r\n        checked = true;\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <label>\r\n                <input type='checkbox' checked={checked} value={name} onChange={e => setSelectedList(changeOption(item, selectedList))} />{name}\r\n            </label>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Checkbox;","import React, { useContext } from 'react';\r\nimport { CreateContext } from '../CreateContext/CreateContext';\r\nimport { LibraryContext } from '../../Context/LibraryContext';\r\n\r\nconst CreateButtons = (props) => {\r\n\r\n    let {\r\n        createOption,\r\n        selectedList,\r\n        // trackList,\r\n        setCreateOption,\r\n        setSelectedList,\r\n        setArtistList,\r\n        setTrackList,\r\n        clearSelection,\r\n        associateArtists,\r\n        findArtistsByGenre,\r\n        pullTracksFromArtists,\r\n        // beginCreateStage,\r\n        goBack,\r\n    } = useContext(CreateContext);\r\n\r\n    let {\r\n        artistLibrary,\r\n    } = useContext(LibraryContext);\r\n    \r\n    //switches the PlaylistMaker display back and forth between\r\n    //'default-genre' and 'default-artist' and filters the\r\n    //appropriate data to display what it should be displaying\r\n    const toggleArtists = () => {\r\n        console.log('toggling: ', props.display)\r\n        if (props.display === 'default-genre') {\r\n            let artistList = findArtistsByGenre(selectedList, artistLibrary);\r\n            setArtistList(artistList);\r\n            props.setDisplay('default-artist');\r\n        } else if (props.display === 'default-artist') {\r\n            props.setDisplay('default-genre');\r\n        }\r\n    };\r\n\r\n    const startCreating = () => {\r\n        let artistList = selectedList;\r\n        if (createOption === 'genre') {\r\n            artistList = findArtistsByGenre(artistList, artistLibrary);\r\n        };\r\n        let trackList = pullTracksFromArtists(artistList).sort((a, b) => (a.artists[0] > b.artists[0]) ? 1 : -1);\r\n        setTrackList(trackList);;\r\n        setCreateOption('create')\r\n    }\r\n\r\n    const whichOption = () => {\r\n        if (createOption === 'genre') {\r\n            return (\r\n                <div className='createButtons'>\r\n                    <button onClick={() => toggleArtists()}>{props.display === 'default-genre' ? 'Show Artists' : 'Show Selected Genres'}</button>\r\n                    <button onClick={() => startCreating()}>Show Playlist</button>\r\n                    <button onClick={() => {clearSelection(); props.setDisplay('default-genre')}}>Clear Selection</button>\r\n                </div>\r\n            );\r\n        } else if (createOption === 'artist') {\r\n            return (\r\n                <div className='createButtons'>\r\n                    <button onClick={() => setSelectedList(associateArtists(selectedList, artistLibrary))}>Associate Artists</button>\r\n                    <button onClick={() => startCreating()}>Show Playlist</button>\r\n                    <button onClick={() => {clearSelection()}}>Clear Selection</button>\r\n                </div>\r\n            );\r\n        } else if (createOption === 'create') {\r\n            return (\r\n                <div className='createButtons'>\r\n                    <button onClick={() => props.beginPlaylist()}>Create</button>\r\n                    <button onClick={() => goBack()}>Go Back</button>\r\n                    <button onClick={() => {clearSelection()}}>Clear Selection</button>\r\n                </div>\r\n            );\r\n        };\r\n    };\r\n\r\n    return whichOption();\r\n};\r\n\r\nexport default CreateButtons;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nimport { LibraryProvider } from './components/Context/LibraryContext';\r\nimport {HomePage, Navbar} from './components';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            url: undefined,\r\n            loggedIn: false,\r\n            cookie: '',\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let url;\r\n        async function getURL() {\r\n            let api = '';\r\n            if (process.env.NODE_ENV === 'development') {\r\n                api = 'http://localhost:8888/login';\r\n            } else if (process.env.NODE_ENV === 'production') {\r\n                api = 'https://mendoza-playlist.herokuapp.com/login'\r\n            } else {\r\n                console.log('there was some sort of error determining if this is a prod or dev build in app.js')\r\n            }\r\n            const loginResponse = await axios({\r\n                method: 'get',\r\n                url: api,\r\n                withCredentials: true,\r\n            });\r\n\r\n            return loginResponse.data.body;\r\n        };\r\n        url = await getURL();\r\n        this.setState({\r\n            url: url,\r\n        });\r\n    }\r\n\r\n    changeLogin = () => {\r\n        console.log('changing login state now')\r\n        this.setState({\r\n            loggedIn: true,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(!this.state.loggedIn || this.state.url === undefined) {\r\n            return (\r\n                <LibraryProvider loggedIn={this.state.loggedIn}>\r\n                    <Navbar loggedIn={this.state.loggedIn} changeLogin={this.changeLogin} spotifyURL={this.state.url}/>\r\n                    <div className = 'topLevel'>\r\n                        <h1>Welcome to my Spotify playlist generator app!</h1>\r\n                        <p>This app will allow you to generate playlists using songs already in your library. This assists with playlist generation for users who have lots of songs already in their library and automates the process of manually going through and adding songs to a playlist one by one.</p>\r\n                        <h2>To get started, click the log in button above to generate a sign in link.</h2>\r\n                    </div>\r\n                </LibraryProvider>\r\n            )\r\n        } else {\r\n            return (\r\n                <LibraryProvider>\r\n                    <Navbar loggedIn={this.state.loggedIn}/>\r\n                    <div className='topLevel'>\r\n                            <HomePage/>\r\n                    </div>\r\n                </LibraryProvider>\r\n            )\r\n        }\r\n\r\n    };\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}